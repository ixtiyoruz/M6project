function disparity = stereo_computation(left_im, right_im, mindisp, maxdisp, wsize, cost)

[h w]=size(left_im);

% The depth map has to start at 1 because MATLAB
depth_map = zeros(h,w,1+maxdisp);
disp  = zeros(h,w);

%kernel for convolution. It saves a lot of time and effort.
kernel = ones(wsize);                      

% We compute the sumatory of the regions windowed at each pixel for later,
% in case we use ncc 
if strcmp(cost, 'ncc')
    left = conv2(left_im,kernel,'same');
    sigmaLeft = sqrt(conv2((left_im - left).^2,kernel,'same'));
    right = conv2(right_im,kernel,'same');
    sigmaRight = sqrt(conv2((right_im - left).^2,kernel,'same'));
end

for d=mindisp:maxdisp

  % First index we take is the first row of the d-th column. 
  idx = h*d+1:h*w; 

  if strcmp(cost, 'ssd')
    % if idx points to a pixel, idx - h*d points to the pixel d columns
    % before, which is the disparity measure.
    disp(idx) = (left_im(idx) - right_im(idx - h*d)).^2;
    depth_map(:,:,d+1) = conv2(disp,kernel,'same');
  elseif strcmp(cost, 'ncc')
    disp(idx) = ((left_im(idx) - left(idx)) * (right_im(idx - h*d) - right(idx - h*d));
    
    sigmaLeft = left_
  end
  
  
    
end

% We get the disparity that got the minimal cost value
[val,ind]=min(depth_map,[],3);

% We fix this because MATLAB is a horrible language and it needs constant
% fixes to make sense
disparity = ind-1;
